import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import os

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="Bitki HastalÄ±ÄŸÄ± Tespiti",
    page_icon="ğŸŒ¿",
    layout="centered"
)

# CSS stilleri
st.markdown("""
    <style>
    .main {
        background-color: #f5f5f5;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        border: none;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .success {
        background-color: #dff0d8;
        color: #3c763d;
        padding: 15px;
        border-radius: 5px;
        margin-top: 20px;
    }
    </style>
    """, unsafe_allow_html=True)

# Model dosyasÄ±nÄ±n yolunu belirle
MODEL_PATH = os.path.join(os.path.dirname(__file__), "plant_diesase_model.h5")

# Modeli yÃ¼kle
@st.cache_resource
def load_plant_model():
    try:
        if not os.path.exists(MODEL_PATH):
            st.error(f"Model dosyasÄ± bulunamadÄ±: {MODEL_PATH}")
            return None
        return load_model(MODEL_PATH)
    except Exception as e:
        st.error(f"Model yÃ¼klenirken hata oluÅŸtu: {str(e)}")
        return None

model = load_plant_model()
if model is None:
    st.stop()

class_names = ["SaÄŸlÄ±klÄ±", "HastalÄ±klÄ±"]
img_height, img_width = 224, 224

# BaÅŸlÄ±k ve aÃ§Ä±klama
st.title("ğŸŒ¿ Bitki HastalÄ±ÄŸÄ± Tespiti")
st.markdown("""
    Bu uygulama, bitki yapraklarÄ±nÄ±n saÄŸlÄ±klÄ± olup olmadÄ±ÄŸÄ±nÄ± tespit etmenize yardÄ±mcÄ± olur.
    LÃ¼tfen bir yaprak fotoÄŸrafÄ± yÃ¼kleyin.
""")

# Dosya yÃ¼kleme alanÄ±
uploaded_file = st.file_uploader(
    "Bir yaprak fotoÄŸrafÄ± yÃ¼kleyin",
    type=["jpg", "jpeg", "png"],
    help="Desteklenen formatlar: JPG, JPEG, PNG"
)

if uploaded_file is not None:
    # GÃ¶rÃ¼ntÃ¼yÃ¼ yÃ¼kle ve gÃ¶ster
    img = Image.open(uploaded_file)
    st.image(img, caption='YÃ¼klenen Resim', use_column_width=True)

    # GÃ¶rÃ¼ntÃ¼yÃ¼ iÅŸle
    img = img.resize((img_width, img_height))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0

    # Tahmin yap
    with st.spinner('Tahmin yapÄ±lÄ±yor...'):
        prediction = model.predict(img_array)
        predicted_class = class_names[np.argmax(prediction)]
        confidence = float(np.max(prediction)) * 100

    # Sonucu gÃ¶ster
    st.markdown(f"""
        <div class="success">
            <h3>ğŸŒ± Tahmin Sonucu</h3>
            <p>Durum: <strong>{predicted_class}</strong></p>
            <p>GÃ¼ven: <strong>{confidence:.2f}%</strong></p>
        </div>
    """, unsafe_allow_html=True)

# Alt bilgi
st.markdown("---")
st.markdown("""
    <div style='text-align: center'>
        <p>Â© 2024 Bitki HastalÄ±ÄŸÄ± Tespiti | GeliÅŸtirici: [Ä°sminiz]</p>
    </div>
""", unsafe_allow_html=True)
