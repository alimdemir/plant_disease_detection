import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
import os

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="Bitki HastalÄ±ÄŸÄ± Tespiti",
    page_icon="ğŸŒ¿",
    layout="centered"
)

# Debug bilgisi
st.write("Ã‡alÄ±ÅŸma dizini:", os.getcwd())
st.write("Dosya listesi:", os.listdir())

# Model dosyasÄ±nÄ±n yolunu belirle
MODEL_PATH = os.path.join(os.getcwd(), "plant_diesase_model.h5")

# Model oluÅŸtur ve kaydet
@st.cache_resource
def create_and_save_model():
    try:
        # Model oluÅŸtur
        model = tf.keras.Sequential([
            tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
            tf.keras.layers.MaxPooling2D((2, 2)),
            tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
            tf.keras.layers.MaxPooling2D((2, 2)),
            tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
            tf.keras.layers.Flatten(),
            tf.keras.layers.Dense(64, activation='relu'),
            tf.keras.layers.Dense(4, activation='softmax')
        ])
        
        model.compile(optimizer='adam',
                     loss='categorical_crossentropy',
                     metrics=['accuracy'])
        
        # Modeli kaydet
        model.save(MODEL_PATH)
        st.success("Model baÅŸarÄ±yla oluÅŸturuldu ve kaydedildi!")
        return model
    except Exception as e:
        st.error(f"Model oluÅŸturulurken hata oluÅŸtu: {str(e)}")
        return None

# Modeli yÃ¼kle veya oluÅŸtur
@st.cache_resource
def load_model():
    try:
        if os.path.exists(MODEL_PATH):
            st.write("Model yÃ¼kleniyor...")
            st.write("Dosya boyutu:", os.path.getsize(MODEL_PATH))
            model = tf.keras.models.load_model(MODEL_PATH)
            st.success("Model baÅŸarÄ±yla yÃ¼klendi!")
            return model
        else:
            st.info("Model dosyasÄ± bulunamadÄ±. Yeni model oluÅŸturuluyor...")
            return create_and_save_model()
    except Exception as e:
        st.error(f"Model yÃ¼klenirken hata oluÅŸtu: {str(e)}")
        st.info("Yeni model oluÅŸturuluyor...")
        return create_and_save_model()

# Modeli yÃ¼kle veya oluÅŸtur
model = load_model()
if model is None:
    st.stop()

# SÄ±nÄ±f isimleri
class_names = ['Elma_Karalekesi', 'Elma_Saglikli', 'Domates_ErkenYaprakkÃ¼fÃ¼', 'Domates_Saglikli']

# BaÅŸlÄ±k ve aÃ§Ä±klama
st.title("ğŸŒ¿ Bitki HastalÄ±ÄŸÄ± Tespiti")
st.markdown("""
    Bu uygulama, bitki yapraklarÄ±nÄ±n saÄŸlÄ±klÄ± olup olmadÄ±ÄŸÄ±nÄ± tespit etmenize yardÄ±mcÄ± olur.
    LÃ¼tfen bir yaprak fotoÄŸrafÄ± yÃ¼kleyin.
""")

# Dosya yÃ¼kleme alanÄ±
uploaded_file = st.file_uploader(
    "Bir yaprak fotoÄŸrafÄ± yÃ¼kleyin",
    type=["jpg", "jpeg", "png"],
    help="Desteklenen formatlar: JPG, JPEG, PNG"
)

if uploaded_file is not None:
    # GÃ¶rÃ¼ntÃ¼yÃ¼ yÃ¼kle ve gÃ¶ster
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption='YÃ¼klenen GÃ¶rsel', use_column_width=True)

    # GÃ¶rÃ¼ntÃ¼yÃ¼ iÅŸle
    img = image.resize((224, 224))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)
    img_array = img_array / 255.0

    # Tahmin yap
    with st.spinner('Tahmin yapÄ±lÄ±yor...'):
        predictions = model.predict(img_array)
        predicted_class = class_names[np.argmax(predictions[0])]
        confidence = float(np.max(predictions[0])) * 100

    # Sonucu gÃ¶ster
    st.markdown(f"""
        <div style='background-color: #dff0d8; color: #3c763d; padding: 15px; border-radius: 5px; margin-top: 20px;'>
            <h3>ğŸŒ± Tahmin Sonucu</h3>
            <p>Durum: <strong>{predicted_class}</strong></p>
            <p>GÃ¼ven: <strong>{confidence:.2f}%</strong></p>
        </div>
    """, unsafe_allow_html=True)

# Alt bilgi
st.markdown("---")
st.markdown("""
    <div style='text-align: center'>
        <p>Â© 2024 Bitki HastalÄ±ÄŸÄ± Tespiti</p>
    </div>
""", unsafe_allow_html=True)
